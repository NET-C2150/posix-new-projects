trigger:
  branches:
    include:
      - main
      - release/*

variables:
  BuildDirName: build
  LinuxPool: ubuntu-18.04
  MacPool: macos-10.15
  LinuxCompilerSuffix: -10
  EnableNET6: false
  BuildScriptCommonOptions: --no-color --verbose --managed-verbosity diag --configuration Release
  ArchiveNameBase: mono-posix
  HostArchiveNameBase: $(ArchiveNameBase)-host
  # Linux
  LinuxHostBuildDir: $(BuildDirName)/host-linux-release/lib
  LinuxHostArchiveName: $(HostArchiveNameBase)-linux-x64
  # Android
  AndroidArchiveNameBase: $(ArchiveNameBase)-android
  AndroidArm32BuildDir: $(BuildDirName)/android-arm32-release/lib
  AndroidArm32ArchiveName: $(AndroidArchiveNameBase)-arm32
  AndroidArm64BuildDir: $(BuildDirName)/android-arm64-release/lib
  AndroidArm64ArchiveName: $(AndroidArchiveNameBase)-arm64
  AndroidX64BuildDir: $(BuildDirName)/android-x64-release/lib
  AndroidX64ArchiveName: $(AndroidArchiveNameBase)-x64
  AndroidX86BuildDir: $(BuildDirName)/android-x86-release/lib
  AndroidX86ArchiveName: $(AndroidArchiveNameBase)-x86
  # macOS
  MacHostArchiveNameBase: $(HostArchiveNameBase)-darwin
  MacHostX64ArchiveName: $(MacHostArchiveNameBase)-x64
  MacHostArm64ArchiveName: $(MacHostArchiveNameBase)-arm64
  MacHostBuildDirBase: $(BuildDirName)/host-darwin
  MacHostX64BuildDir: $(MacHostBuildDirBase)-x64-release/lib
  MacHostArm64BuildDir: $(MacHostBuildDirBase)-arm64-release/lib
  # macCatalyst
  MacCatalystArchiveNameBase: $(ArchiveNameBase)-catalyst
  MacCatalystX64ArchiveName: $(MacCatalystArchiveNameBase)-x64
  MacCatalystArm64ArchiveName: $(MacCatalystArchiveNameBase)-arm64
  MacCatalystBuildDirBase: $(BuildDirName)/catalyst
  MacCatalystX64BuildDir: $(MacCatalystBuildDirBase)-x64-release/lib
  MacCatalystArm64BuildDir: $(MacCatalystBuildDirBase)-arm64-release/lib
  # iOS
  MacIOSArchiveNameBase: $(ArchiveNameBase)-ios
  MacIOSArm64ArchiveName: $(MacIOSArchiveNameBase)-arm64
  MacIOSArmV7ArchiveName: $(MacIOSArchiveNameBase)-armv7
  MacIOSArmV7sArchiveName: $(MacIOSArchiveNameBase)-armv7s
  MacIOSSimArm64ArchiveName: $(MacIOSArchiveNameBase)-simarm64
  MacIOSSimX64ArchiveName: $(MacIOSArchiveNameBase)-simx64
  MacIOSBuildDirBase: $(BuildDirName)/ios
  MacIOSArm64BuildDir: $(MacIOSBuildDirBase)-arm64-release/lib
  MacIOSArmV7BuildDir: $(MacIOSBuildDirBase)-armv7-release/lib
  MacIOSArmV7sBuildDir: $(MacIOSBuildDirBase)-armv7s-release/lib
  MacIOSSimArm64BuildDir: $(MacIOSBuildDirBase)-simarm64-release/lib
  MacIOSSimX64BuildDir: $(MacIOSBuildDirBase)-simx64-release/lib
  # tvOS
  MacTVOSArchiveNameBase: $(ArchiveNameBase)-tvos
  MacTVOSArm64ArchiveName: $(MacTVOSArchiveNameBase)-arm64
  MacTVOSSimX64ArchiveName: $(MacTVOSArchiveNameBase)-simx64
  MacTVOSBuildDirBase: $(BuildDirName)/tvos
  MacTVOSArm64BuildDir: $(MacTVOSBuildDirBase)-arm64-release/lib
  MacTVOSSimX64BuildDir: $(MacTVOSBuildDirBase)-simx64-release/lib
  # managed
  ManagedArchiveName: $(ArchiveNameBase)-managed
  ManagedBuildDir: $(BuildDirName)/managed/Release
  ManagedLogsDir: $(BuildDirName)/logs
  ManagedLogsArchiveName: $(ArchiveNameBase)-managed-logs

stages:
- stage: Build
  jobs:
  - job: linux_build_host
    displayName: Build for Linux
    pool:
      vmImage: '$(LinuxPool)'
    workspace:
      clean: all
    steps:
    - template: templates/linux-common.yaml

    - bash: |
        CC=gcc$(LinuxCompilerSuffix) CXX=g++$(LinuxCompilerSuffix) ./build.sh $(BuildScriptCommonOptions) host
      displayName: Build

    - template: templates/pack-artifact.yaml
      parameters:
        buildDir: '$(LinuxHostBuildDir)'
        archiveName: '$(LinuxHostArchiveName)'
        displayName: 'Archive Linux host build'

    - task: PublishBuildArtifacts@1
      displayName: Upload Artifacts
      inputs:
        artifactName: 'Host'
        pathToPublish: $(Build.ArtifactStagingDirectory)

  - job: linux_build_android
    displayName: Build for Android
    pool:
      vmImage: '$(LinuxPool)'
    workspace:
      clean: all
    steps:
    - template: templates/linux-common.yaml

    - bash: |
        ./build.sh $(BuildScriptCommonOptions) --ndk $(ANDROID_NDK_HOME) android
      displayName: Build

    - template: templates/pack-artifact.yaml
      parameters:
        buildDir: '$(AndroidArm32BuildDir)'
        archiveName: '$(AndroidArm32ArchiveName)'
        displayName: 'Archive Android ARM32 build'

    - template: templates/pack-artifact.yaml
      parameters:
        buildDir: '$(AndroidArm64BuildDir)'
        archiveName: '$(AndroidArm64ArchiveName)'
        displayName: 'Archive Android ARM64 build'

    - template: templates/pack-artifact.yaml
      parameters:
        buildDir: '$(AndroidX86BuildDir)'
        archiveName: '$(AndroidX86ArchiveName)'
        displayName: 'Archive Android x86 build'

    - template: templates/pack-artifact.yaml
      parameters:
        buildDir: '$(AndroidX64BuildDir)'
        archiveName: '$(AndroidX64ArchiveName)'
        displayName: 'Archive Android x86_64 build'

    - task: PublishBuildArtifacts@1
      displayName: Upload Artifacts
      inputs:
        artifactName: 'Android'
        pathToPublish: $(Build.ArtifactStagingDirectory)

  - job: mac_build_host
    displayName: Build for macOS
    pool:
      vmImage: '$(MacPool)'
    workspace:
      clean: all
    steps:
    - template: templates/mac-common.yaml

    - template: templates/mac-build.yaml
      parameters:
        buildTarget: 'host'
        x64BuildDir: $(MacHostX64BuildDir)
        x64ArchiveName: $(MacHostX64ArchiveName)
        arm64BuildDir: $(MacHostArm64BuildDir)
        arm64ArchiveName: $(MacHostArm64ArchiveName)
        publishArtifactName: 'Host'

  - job: mac_build_catalyst
    displayName: Build for macOS Catalyst
    pool:
      vmImage: '$(MacPool)'
    workspace:
      clean: all
    steps:
    - template: templates/mac-common.yaml

    - template: templates/mac-build.yaml
      parameters:
        buildTarget: 'catalyst'
        x64BuildDir: $(MacCatalystX64BuildDir)
        x64ArchiveName: $(MacCatalystX64ArchiveName)
        arm64BuildDir: $(MacCatalystArm64BuildDir)
        arm64ArchiveName: $(MacCatalystArm64ArchiveName)
        publishArtifactName: 'macOS_Catalyst'

  - job: mac_build_ios
    displayName: Build for iOS
    pool:
      vmImage: '$(MacPool)'
    workspace:
      clean: all
    steps:
    - template: templates/mac-common.yaml

    - template: templates/ios-build.yaml
      parameters:
        buildDirArm64: '$(MacIOSArm64BuildDir)'
        buildDirArmV7: '$(MacIOSArmV7BuildDir)'
        buildDirArmV7s: '$(MacIOSArmV7sBuildDir)'
        buildDirSimArm64: '$(MacIOSSimArm64BuildDir)'
        buildDirSimX64: '$(MacIOSSimX64BuildDir)'
        archiveNameArm64: '$(MacIOSArm64ArchiveName)'
        archiveNameArmV7: '$(MacIOSArmV7ArchiveName)'
        archiveNameArmV7s: '$(MacIOSArmV7sArchiveName)'
        archiveNameSimArm64: '$(MacIOSSimArm64ArchiveName)'
        archiveNameSimX64: '$(MacIOSSimX64ArchiveName)'
        publishArtifactName: 'iOS'

  - job: mac_build_tvos
    displayName: Build for tvOS
    pool:
      vmImage: '$(MacPool)'
    workspace:
      clean: all
    steps:
    - template: templates/mac-common.yaml

    - template: templates/tvos-build.yaml
      parameters:
        buildDirArm64: '$(MacTVOSArm64BuildDir)'
        buildDirSimX64: '$(MacTVOSSimX64BuildDir)'
        archiveNameArm64: '$(MacTVOSArm64ArchiveName)'
        archiveNameSimX64: '$(MacTVOSSimX64ArchiveName)'
        publishArtifactName: 'tvOS'

  - job: mac_build_managed
    displayName: Build managed
    pool:
      vmImage: '$(MacPool)'
    variables:
      DotNetCoreVersion: 5.0.202
    workspace:
      clean: all
    steps:
    - bash: |
        ./build.sh $(BuildScriptCommonOptions) managed
      displayName: Build

    - template: templates/pack-artifact.yaml
      parameters:
        buildDir: '$(ManagedBuildDir)'
        archiveName: '$(ManagedArchiveName)'
        displayName: 'Archive Managed code'

    - template: templates/pack-artifact.yaml
      parameters:
        buildDir: '$(ManagedLogsDir)'
        archiveName: '$(ManagedLogsArchiveName)'
        displayName: 'Archive Managed build logs'

    - task: PublishBuildArtifacts@1
      displayName: Upload Artifacts
      inputs:
        artifactName: 'Managed'
        pathToPublish: $(Build.ArtifactStagingDirectory)

- stage: Test
  dependsOn: Build
  variables:
      DotNetCoreVersion: 5.0.202
  jobs:
  - job: linux_test
    displayName: Test Linux
    pool:
      vmImage: '$(LinuxPool)'
    workspace:
      clean: all
    steps:
    - template: templates/linux-common.yaml

    - task: DownloadBuildArtifacts@0
      displayName: Download host build artifacts
      inputs:
        artifactName: 'Host'
        downloadPath: $(Build.ArtifactStagingDirectory)

    - task: DownloadBuildArtifacts@0
      displayName: Download managed build artifacts
      inputs:
        artifactName: 'Managed'
        downloadPath: $(Build.ArtifactStagingDirectory)

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract Linux host build
        artifactName: 'Host'
        archiveName: '$(LinuxHostArchiveName)'
        destinationFolder: '$(LinuxHostBuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract Managed build
        artifactName: 'Managed'
        archiveName: '$(ManagedArchiveName)'
        destinationFolder: '$(ManagedBuildDir)'

    - bash: |
        ./build.sh $(BuildScriptCommonOptions) --no-build test
      displayName: Run tests
      continueOnError: true

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(ManagedLogsDir)/*netcoreapp3.1.trx'
        testRunTitle: 'Linux netcoreapp 3.1 tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(ManagedLogsDir)/*net6.0.trx'
        testRunTitle: 'Linux net6 tests'
      condition: eq(variables['EnableNET6'], true)

    - template: templates\fail-on-issue.yaml

  - job: mac_test
    displayName: Test macOS
    pool:
      vmImage: '$(MacPool)'
    workspace:
      clean: all
    steps:
    - template: templates/mac-common.yaml

    - task: DownloadBuildArtifacts@0
      displayName: Download host build artifacts
      inputs:
        artifactName: 'Host'
        downloadPath: $(Build.ArtifactStagingDirectory)

    - task: DownloadBuildArtifacts@0
      displayName: Download managed build artifacts
      inputs:
        artifactName: 'Managed'
        downloadPath: $(Build.ArtifactStagingDirectory)

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract macOS arm64 host build
        artifactName: 'Host'
        archiveName: '$(MacHostArm64ArchiveName)'
        destinationFolder: '$(MacHostArm64BuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract macOS x64 host build
        artifactName: 'Host'
        archiveName: '$(MacHostX64ArchiveName)'
        destinationFolder: '$(MacHostX64BuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract Managed build
        artifactName: 'Managed'
        archiveName: '$(ManagedArchiveName)'
        destinationFolder: '$(ManagedBuildDir)'

    - bash: |
        ./build.sh $(BuildScriptCommonOptions) --no-build test
      displayName: Run tests
      continueOnError: true

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(ManagedLogsDir)/*netcoreapp3.1.trx'
        testRunTitle: 'macOS netcoreapp 3.1 tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(ManagedLogsDir)/*net6.0.trx'
        testRunTitle: 'macOS net6 tests'
      condition: eq(variables['EnableNET6'], true)

    - template: templates\fail-on-issue.yaml

- stage: Package
  dependsOn: Build
  variables:
      DotNetCoreVersion: 5.0.202
  jobs:
  - job: mac_package
    displayName: Create NuGet packages
    pool:
      vmImage: '$(MacPool)'
    workspace:
      clean: all
    steps:
    - template: templates/mac-common.yaml

    - task: DownloadBuildArtifacts@0
      displayName: Download host build artifacts
      inputs:
        artifactName: 'Host'
        downloadPath: $(Build.ArtifactStagingDirectory)

    - task: DownloadBuildArtifacts@0
      displayName: Download managed build artifacts
      inputs:
        artifactName: 'Managed'
        downloadPath: $(Build.ArtifactStagingDirectory)

    - task: DownloadBuildArtifacts@0
      displayName: Download managed build artifacts
      inputs:
        artifactName: 'Android'
        downloadPath: $(Build.ArtifactStagingDirectory)

    - task: DownloadBuildArtifacts@0
      displayName: Download managed build artifacts
      inputs:
        artifactName: 'iOS'
        downloadPath: $(Build.ArtifactStagingDirectory)

    - task: DownloadBuildArtifacts@0
      displayName: Download managed build artifacts
      inputs:
        artifactName: 'macOS_Catalyst'
        downloadPath: $(Build.ArtifactStagingDirectory)

    - task: DownloadBuildArtifacts@0
      displayName: Download managed build artifacts
      inputs:
        artifactName: 'tvOS'
        downloadPath: $(Build.ArtifactStagingDirectory)

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract Managed build
        artifactName: 'Managed'
        archiveName: '$(ManagedArchiveName)'
        destinationFolder: '$(ManagedBuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract Linux host build
        artifactName: 'Host'
        archiveName: '$(LinuxHostArchiveName)'
        destinationFolder: '$(LinuxHostBuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract macOS arm64 host build
        artifactName: 'Host'
        archiveName: '$(MacHostArm64ArchiveName)'
        destinationFolder: '$(MacHostArm64BuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract macOS x64 host build
        artifactName: 'Host'
        archiveName: '$(MacHostX64ArchiveName)'
        destinationFolder: '$(MacHostX64BuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract macOS Catalyst x64 build
        artifactName: 'macOS_Catalyst'
        archiveName: '$(MacCatalystX64ArchiveName)'
        destinationFolder: '$(MacCatalystX64BuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract macOS Catalyst ARM64 build
        artifactName: 'macOS_Catalyst'
        archiveName: '$(MacCatalystArm64ArchiveName)'
        destinationFolder: '$(MacCatalystArm64BuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract macOS arm64 host build
        artifactName: 'Host'
        archiveName: '$(MacHostArm64ArchiveName)'
        destinationFolder: '$(MacHostArm64BuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract Android ARM32 build
        artifactName: 'Android'
        archiveName: '$(AndroidArm32ArchiveName)'
        destinationFolder: '$(AndroidArm32BuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract Android ARM64 build
        artifactName: 'Android'
        archiveName: '$(AndroidArm64ArchiveName)'
        destinationFolder: '$(AndroidArm64BuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract Android x86 build
        artifactName: 'Android'
        archiveName: '$(AndroidX86ArchiveName)'
        destinationFolder: '$(AndroidX86BuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract Android x86_64 build
        artifactName: 'Android'
        archiveName: '$(AndroidX64ArchiveName)'
        destinationFolder: '$(AndroidX64BuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract iOS ARM64 build
        artifactName: 'iOS'
        archiveName: '$(MacIOSArm64ArchiveName)'
        destinationFolder: '$(MacIOSArm64BuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract iOS ARMv7 build
        artifactName: 'iOS'
        archiveName: '$(MacIOSArmV7ArchiveName)'
        destinationFolder: '$(MacIOSArmV7BuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract iOS ARMv7s build
        artifactName: 'iOS'
        archiveName: '$(MacIOSArmV7sArchiveName)'
        destinationFolder: '$(MacIOSArmV7sBuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract iOS ARM64 Simulator build
        artifactName: 'iOS'
        archiveName: '$(MacIOSSimArm64ArchiveName)'
        destinationFolder: '$(MacIOSSimArm64BuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract iOS x64 Simulator build
        artifactName: 'iOS'
        archiveName: '$(MacIOSSimX64ArchiveName)'
        destinationFolder: '$(MacIOSSimX64BuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract tvOS ARM64 build
        artifactName: 'tvOS'
        archiveName: '$(MacTVOSArm64ArchiveName)'
        destinationFolder: '$(MacTVOSArm64BuildDir)'

    - template: templates/extract-artifact.yaml
      parameters:
        displayName: Extract tvOS x64 Simulator build
        artifactName: 'tvOS'
        archiveName: '$(MacTVOSSimX64ArchiveName)'
        destinationFolder: '$(MacTVOSSimX64BuildDir)'

    - bash: |
        ./build.sh $(BuildScriptCommonOptions) --no-build package

    - task: CopyFiles@2
      displayName: Copy NuGet files
      inputs:
        contents: '$(ManagedBuildDir)/*.nupkg'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)/nugets

    - task: PublishBuildArtifacts@1
      displayName: Upload NuGets
      inputs:
        artifactName: 'NuGet'
        pathToPublish: $(Build.ArtifactStagingDirectory)/nugets
